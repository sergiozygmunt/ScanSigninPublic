/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.desko.fullpage;

public class PageScanApiJNI {
  public final static native int lsIr_get();
  public final static native int lsVisible_get();
  public final static native int lsUvOnly_get();
  public final static native int lsUv3LED_get();
  public final static native long PSA_UNDEF_PIXELS_PER_MM_get();
  public final static native long PSA_150_DPI_get();
  public final static native long PSA_240_DPI_get();
  public final static native long PSA_300_DPI_get();
  public final static native long PSA_450_DPI_get();
  public final static native long PSA_600_DPI_get();
  public final static native long resUndefined_get();
  public final static native long resLow_get();
  public final static native long resDefault_get();
  public final static native long resHigh_get();
  public final static native int rrNoErr_get();
  public final static native int rrFailedRecognition_get();
  public final static native int rrDocWithoutMrz_get();
  public final static native int rrDocRotation_get();
  public final static native int rrGoodRecognition_get();
  public final static native int rrToManyRejections_get();
  public final static native int rrDocLayoutNotOK_get();
  public final static native int rrUnknownError_get();
  public final static native int rrNoDoc_get();
  public final static native int API_VERSION_get();
  public final static native int API_NUMBER_get();
  public final static native int API_RELEASE_get();
  public final static native int psaSuccess_get();
  public final static native int psaFail_get();
  public final static native int psaDevice_NotFound_get();
  public final static native int psaDevice_NotConnected_get();
  public final static native int psaDevice_AlreadyConnected_get();
  public final static native int psaDevice_UnexpectedAnswer_get();
  public final static native int psaUnkownError_get();
  public final static native int psaIntf_InvalidBufferSize_get();
  public final static native int psaIntf_NotCalibrated_get();
  public final static native int psaUnsupportedFunction_get();
  public final static native void SetLastPSAError(int jarg1, String jarg2, String jarg3);
  public final static native int debugNone_get();
  public final static native int debugNotice_get();
  public final static native int debugSystem_get();
  public final static native int debugError_get();
  public final static native int logOff_get();
  public final static native int logFatal_get();
  public final static native int logError_get();
  public final static native int logWarn_get();
  public final static native int logInfo_get();
  public final static native int logDebug_get();
  public final static native int logTrace_get();
  public final static native int ConnectToDevice();
  public final static native int DisconnectFromDevice();
  public final static native int ResetDevice();
  public final static native boolean IsDeviceConnected();
  public final static native boolean IsDevicePlugged();
  public final static native int UpdateFirmware(byte[] jarg1, long jarg2, int jarg3, boolean jarg4);
  public final static native int RequestPentaConfig(int[] jarg1);
  public final static native int GetPentaConfig(byte[] jarg1);
  public final static native int SetPentaConfig(byte[] jarg1, int jarg2);
  public final static native void TPSADeviceInfo_CompileDate_set(long jarg1, TPSADeviceInfo jarg1_, String jarg2);
  public final static native String TPSADeviceInfo_CompileDate_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_CompileTime_set(long jarg1, TPSADeviceInfo jarg1_, String jarg2);
  public final static native String TPSADeviceInfo_CompileTime_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_UV_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_UV_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_Color_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_Color_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_Barcode_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_Barcode_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_MSR_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_MSR_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_Display_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_Display_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_ExtStatusLed_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_ExtStatusLed_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Support_ExtBuzzer_set(long jarg1, TPSADeviceInfo jarg1_, boolean jarg2);
  public final static native boolean TPSADeviceInfo_Support_ExtBuzzer_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Version_set(long jarg1, TPSADeviceInfo jarg1_, int jarg2);
  public final static native int TPSADeviceInfo_Version_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native void TPSADeviceInfo_Number_set(long jarg1, TPSADeviceInfo jarg1_, int jarg2);
  public final static native int TPSADeviceInfo_Number_get(long jarg1, TPSADeviceInfo jarg1_);
  public final static native long new_TPSADeviceInfo();
  public final static native void delete_TPSADeviceInfo(long jarg1);
  public final static native int deviceTypeUnknown_get();
  public final static native int deviceTypeGen3_get();
  public final static native int deviceTypeGen4_get();
  public final static native long supportUvLight_get();
  public final static native long supportColor_get();
  public final static native long supportBarcode_get();
  public final static native long supportMsr_get();
  public final static native long supportTextDisplay_get();
  public final static native long supportExternalStatusLed_get();
  public final static native long supportExternalBuzzer_get();
  public final static native long supportGraphicalDisplay_get();
  public final static native void TPSAAPIInfo_CompileDate_set(long jarg1, TPSAAPIInfo jarg1_, String jarg2);
  public final static native String TPSAAPIInfo_CompileDate_get(long jarg1, TPSAAPIInfo jarg1_);
  public final static native void TPSAAPIInfo_CompileTime_set(long jarg1, TPSAAPIInfo jarg1_, String jarg2);
  public final static native String TPSAAPIInfo_CompileTime_get(long jarg1, TPSAAPIInfo jarg1_);
  public final static native void TPSAAPIInfo_Version_set(long jarg1, TPSAAPIInfo jarg1_, int jarg2);
  public final static native int TPSAAPIInfo_Version_get(long jarg1, TPSAAPIInfo jarg1_);
  public final static native void TPSAAPIInfo_Number_set(long jarg1, TPSAAPIInfo jarg1_, int jarg2);
  public final static native int TPSAAPIInfo_Number_get(long jarg1, TPSAAPIInfo jarg1_);
  public final static native long new_TPSAAPIInfo();
  public final static native void delete_TPSAAPIInfo(long jarg1);
  public final static native String GetDllVersion();
  public final static native int GetAPIInfo(long jarg1, TPSAAPIInfo jarg1_);
  public final static native int GetSystemInfo(long jarg1, TPSADeviceInfo jarg1_);
  public final static native int GetSystemInfoFlags(long[] jarg1);
  public final static native int GetSystemVidPid(int[] jarg1, int[] jarg2);
  public final static native int GetDeviceType();
  public final static native int GetResolutionInfo(long jarg1, int[] jarg2, int[] jarg3, int[] jarg4, int[] jarg5);
  public final static native long keyNone_get();
  public final static native long keyDllCompileDate_get();
  public final static native long keyDllCompileTime_get();
  public final static native long keyDllVersionString_get();
  public final static native long keyApiVersionString_get();
  public final static native long keyDeviceVid_get();
  public final static native long keyDevicePid_get();
  public final static native long keyDeviceFirmwareDate_get();
  public final static native long keyDeviceFirmwareTime_get();
  public final static native long keyDeviceFirmwareVersionString_get();
  public final static native long keyDeviceFirmwareVersionMajor_get();
  public final static native long keyDeviceFirmwareVersionMinor_get();
  public final static native long keyDeviceProductionId_get();
  public final static native long keyDeviceSerialNumber_get();
  public final static native long keyDevicePcbRevision_get();
  public final static native long keyDeviceSupportUvLight_get();
  public final static native long keyDeviceSupportColor_get();
  public final static native long keyDeviceSupportBarcode_get();
  public final static native long keyDeviceSupportMsr_get();
  public final static native long keyDeviceSupportTextDisplay_get();
  public final static native long keyDeviceSupportExternalStatusLed_get();
  public final static native long keyDeviceSupportExternalBuzzer_get();
  public final static native long keyDeviceSupportGraphicalDisplay_get();
  public final static native boolean HasPropertyString(long jarg1);
  public final static native int GetPropertyStringSize(long jarg1, int[] jarg2);
  public final static native int GetPropertyString(long jarg1, short[] jarg2, int jarg3);
  public final static native boolean HasPropertyInt(long jarg1);
  public final static native int GetPropertyInt(long jarg1, int[] jarg2);
  public final static native boolean HasPropertyUInt(long jarg1);
  public final static native int GetPropertyUInt(long jarg1, long[] jarg2);
  public final static native boolean HasPropertyDouble(long jarg1);
  public final static native int GetPropertyDouble(long jarg1, int[] jarg2);
  public final static native char sluPermanent_get();
  public final static native char sluFlashing_get();
  public final static native char slcBlack_get();
  public final static native char slcRed_get();
  public final static native char slcGreen_get();
  public final static native char slcYellow_get();
  public final static native char slcBlue_get();
  public final static native char slcPurple_get();
  public final static native char slcTurquise_get();
  public final static native char slcwhite_get();
  public final static native int INFINITE_DURATION_STATUSLED_get();
  public final static native void TPSAStatusLEDSettings_Enabled_set(long jarg1, TPSAStatusLEDSettings jarg1_, boolean jarg2);
  public final static native boolean TPSAStatusLEDSettings_Enabled_get(long jarg1, TPSAStatusLEDSettings jarg1_);
  public final static native void TPSAStatusLEDSettings_Color_set(long jarg1, TPSAStatusLEDSettings jarg1_, char jarg2);
  public final static native char TPSAStatusLEDSettings_Color_get(long jarg1, TPSAStatusLEDSettings jarg1_);
  public final static native void TPSAStatusLEDSettings_Usage_set(long jarg1, TPSAStatusLEDSettings jarg1_, char jarg2);
  public final static native char TPSAStatusLEDSettings_Usage_get(long jarg1, TPSAStatusLEDSettings jarg1_);
  public final static native void TPSAStatusLEDSettings_Duration_set(long jarg1, TPSAStatusLEDSettings jarg1_, long jarg2);
  public final static native long TPSAStatusLEDSettings_Duration_get(long jarg1, TPSAStatusLEDSettings jarg1_);
  public final static native void TPSAStatusLEDSettings_HighTime_set(long jarg1, TPSAStatusLEDSettings jarg1_, long jarg2);
  public final static native long TPSAStatusLEDSettings_HighTime_get(long jarg1, TPSAStatusLEDSettings jarg1_);
  public final static native void TPSAStatusLEDSettings_LowTime_set(long jarg1, TPSAStatusLEDSettings jarg1_, long jarg2);
  public final static native long TPSAStatusLEDSettings_LowTime_get(long jarg1, TPSAStatusLEDSettings jarg1_);
  public final static native long new_TPSAStatusLEDSettings();
  public final static native void delete_TPSAStatusLEDSettings(long jarg1);
  public final static native int SetStatusLEDSettings(boolean jarg1, long jarg2, TPSAStatusLEDSettings jarg2_);
  public final static native int GetStatusLEDSettings(boolean jarg1, long jarg2, TPSAStatusLEDSettings jarg2_);
  public final static native int UseStatusLED(boolean jarg1);
  public final static native int SetExtStatusLED(char jarg1);
  public final static native int UseExtStatusLED(boolean jarg1, boolean jarg2, int jarg3);
  public final static native void TPSABuzzerSettings_Enabled_set(long jarg1, TPSABuzzerSettings jarg1_, boolean jarg2);
  public final static native boolean TPSABuzzerSettings_Enabled_get(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native void TPSABuzzerSettings_Duration_set(long jarg1, TPSABuzzerSettings jarg1_, int jarg2);
  public final static native int TPSABuzzerSettings_Duration_get(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native void TPSABuzzerSettings_HighTime_set(long jarg1, TPSABuzzerSettings jarg1_, int jarg2);
  public final static native int TPSABuzzerSettings_HighTime_get(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native void TPSABuzzerSettings_LowTime_set(long jarg1, TPSABuzzerSettings jarg1_, int jarg2);
  public final static native int TPSABuzzerSettings_LowTime_get(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native long new_TPSABuzzerSettings();
  public final static native void delete_TPSABuzzerSettings(long jarg1);
  public final static native void TPSABuzzerSettings2_Volume_set(long jarg1, TPSABuzzerSettings2 jarg1_, char jarg2);
  public final static native char TPSABuzzerSettings2_Volume_get(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native void TPSABuzzerSettings2_Duration_set(long jarg1, TPSABuzzerSettings2 jarg1_, int jarg2);
  public final static native int TPSABuzzerSettings2_Duration_get(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native void TPSABuzzerSettings2_HighTime_set(long jarg1, TPSABuzzerSettings2 jarg1_, int jarg2);
  public final static native int TPSABuzzerSettings2_HighTime_get(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native void TPSABuzzerSettings2_LowTime_set(long jarg1, TPSABuzzerSettings2 jarg1_, int jarg2);
  public final static native int TPSABuzzerSettings2_LowTime_get(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native long new_TPSABuzzerSettings2();
  public final static native void delete_TPSABuzzerSettings2(long jarg1);
  public final static native int SetBuzzerSettings(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native int GetBuzzerSettings(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native int SetExtBuzzerSettings(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native int GetExtBuzzerSettings(long jarg1, TPSABuzzerSettings jarg1_);
  public final static native int SetBuzzerSettings2(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native int GetBuzzerSettings2(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native int SetExtBuzzerSettings2(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native int GetExtBuzzerSettings2(long jarg1, TPSABuzzerSettings2 jarg1_);
  public final static native int UseBuzzer();
  public final static native int UseExtBuzzer();
  public final static native int wfdmAuto_get();
  public final static native int wfdmManual_get();
  public final static native int ReadOcrDevice(int[] jarg1, long[] jarg2);
  public final static native int GetOcrOutputDevice(byte[] jarg1, long jarg2);
  public final static native int TouchUp_get();
  public final static native int TouchDown_get();
  public final static native int Scan();
  public final static native int IsDocumentPresent(boolean[] jarg1);
  public final static native int ScanAndCheck(boolean[] jarg1);
  public final static native long sfNone_get();
  public final static native long sfUse_get();
  public final static native long sfAmbientLightElimination_get();
  public final static native void TPSAScanSettings_ScanIRLight_set(long jarg1, TPSAScanSettings jarg1_, boolean jarg2);
  public final static native boolean TPSAScanSettings_ScanIRLight_get(long jarg1, TPSAScanSettings jarg1_);
  public final static native void TPSAScanSettings_ScanUvOnlyLight_set(long jarg1, TPSAScanSettings jarg1_, boolean jarg2);
  public final static native boolean TPSAScanSettings_ScanUvOnlyLight_get(long jarg1, TPSAScanSettings jarg1_);
  public final static native void TPSAScanSettings_ScanUV3Light_set(long jarg1, TPSAScanSettings jarg1_, boolean jarg2);
  public final static native boolean TPSAScanSettings_ScanUV3Light_get(long jarg1, TPSAScanSettings jarg1_);
  public final static native void TPSAScanSettings_ScanVisibleLight_set(long jarg1, TPSAScanSettings jarg1_, boolean jarg2);
  public final static native boolean TPSAScanSettings_ScanVisibleLight_get(long jarg1, TPSAScanSettings jarg1_);
  public final static native void TPSAScanSettings_Resolution_set(long jarg1, TPSAScanSettings jarg1_, long jarg2);
  public final static native long TPSAScanSettings_Resolution_get(long jarg1, TPSAScanSettings jarg1_);
  public final static native long new_TPSAScanSettings();
  public final static native void delete_TPSAScanSettings(long jarg1);
  public final static native void TPSAScanSettingsEx_ScanIRLight_set(long jarg1, TPSAScanSettingsEx jarg1_, long jarg2);
  public final static native long TPSAScanSettingsEx_ScanIRLight_get(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native void TPSAScanSettingsEx_ScanUvOnlyLight_set(long jarg1, TPSAScanSettingsEx jarg1_, long jarg2);
  public final static native long TPSAScanSettingsEx_ScanUvOnlyLight_get(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native void TPSAScanSettingsEx_ScanUV3Light_set(long jarg1, TPSAScanSettingsEx jarg1_, long jarg2);
  public final static native long TPSAScanSettingsEx_ScanUV3Light_get(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native void TPSAScanSettingsEx_ScanVisibleLight_set(long jarg1, TPSAScanSettingsEx jarg1_, long jarg2);
  public final static native long TPSAScanSettingsEx_ScanVisibleLight_get(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native void TPSAScanSettingsEx_Resolution_set(long jarg1, TPSAScanSettingsEx jarg1_, long jarg2);
  public final static native long TPSAScanSettingsEx_Resolution_get(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native void TPSAScanSettingsEx_ScanFlags_set(long jarg1, TPSAScanSettingsEx jarg1_, long jarg2);
  public final static native long TPSAScanSettingsEx_ScanFlags_get(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native long new_TPSAScanSettingsEx();
  public final static native void delete_TPSAScanSettingsEx(long jarg1);
  public final static native int SetScanSettings(long jarg1, TPSAScanSettings jarg1_);
  public final static native int SetScanSettingsEx(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native int GetScanSettings(long jarg1, TPSAScanSettings jarg1_);
  public final static native int GetScanSettingsEx(long jarg1, TPSAScanSettingsEx jarg1_);
  public final static native int ioNone_get();
  public final static native int ioStitching_get();
  public final static native int ioBest_get();
  public final static native int PrepareRawImage(int jarg1, int jarg2, int[] jarg3, int[] jarg4, int[] jarg5, long[] jarg6);
  public final static native int PrepareRawFacialImage(int jarg1, int jarg2, int[] jarg3, int[] jarg4, int[] jarg5, long[] jarg6);
  public final static native int PrepareRawClippedDocumentImage(int jarg1, int jarg2, int[] jarg3, int[] jarg4, int[] jarg5, long[] jarg6);
  public final static native int GetRawImage(byte[] jarg1, long jarg2);
  public final static native int PrepareBmpImage(int jarg1, int jarg2, long[] jarg3);
  public final static native int PrepareBmpFacialImage(int jarg1, int jarg2, long[] jarg3);
  public final static native int PrepareBmpClippedDocumentImage(int jarg1, int jarg2, long[] jarg3);
  public final static native int GetBmpImage(byte[] jarg1, long jarg2);
  public final static native int PrepareJpegImage(int jarg1, int jarg2, short jarg3, long[] jarg4);
  public final static native int PrepareJpegFacialImage(int jarg1, int jarg2, short jarg3, long[] jarg4);
  public final static native int PrepareJpegClippedDocumentImage(int jarg1, int jarg2, short jarg3, long[] jarg4);
  public final static native int GetJpegImage(byte[] jarg1, long jarg2);
  public final static native int PreparePngImage(int jarg1, int jarg2, short jarg3, long[] jarg4);
  public final static native int PreparePngFacialImage(int jarg1, int jarg2, short jarg3, long[] jarg4);
  public final static native int PreparePngClippedDocumentImage(int jarg1, int jarg2, short jarg3, long[] jarg4);
  public final static native int GetPngImage(byte[] jarg1, long jarg2);
  public final static native int ReadOcr(int[] jarg1, int[] jarg2, long[] jarg3);
  public final static native int ReadOcrPc(int[] jarg1, long[] jarg2);
  public final static native int GetOcrOutputPc(byte[] jarg1, long jarg2);
  public final static native int GetOcrOutput(byte[] jarg1, long jarg2);
  public final static native int ReadBarcode(boolean[] jarg1, int[] jarg2, long[] jarg3);
  public final static native int GetBarcodeOutput(byte[] jarg1, long jarg2);
  public final static native int ReadMsr(boolean[] jarg1, int[] jarg2, long[] jarg3);
  public final static native int GetMsrOutput(byte[] jarg1, long jarg2);
  public final static native int SetDisplayText(String jarg1);
  public final static native int StoreDisplayImage(long jarg1, long jarg2, byte[] jarg3, long jarg4, long jarg5);
  public final static native int ClearDisplayImage(long jarg1, long jarg2);
  public final static native int ShowDisplayImage(long jarg1, long jarg2);
  public final static native int ShowDisplayImageNoStore(byte[] jarg1, long jarg2, long jarg3);
  public final static native int GetDisplayDimensions(long[] jarg1, long[] jarg2);
  public final static native int ShowDisplayImageAndText(long jarg1, long jarg2, String jarg3);
  public final static native int ShowDisplayImageNoStoreAndText(byte[] jarg1, long jarg2, long jarg3, String jarg4);
  public final static native int CheckDocumentPresentPc(int jarg1, boolean[] jarg2);
  public final static native int SetDisplayFont(byte[] jarg1, long jarg2);
  public final static native void delete_DebugHandler(long jarg1);
  public final static native void DebugHandler_OnEvent(long jarg1, DebugHandler jarg1_, int jarg2, String jarg3, String jarg4, int jarg5, String jarg6, String jarg7);
  public final static native void DebugHandler_OnEventSwigExplicitDebugHandler(long jarg1, DebugHandler jarg1_, int jarg2, String jarg3, String jarg4, int jarg5, String jarg6, String jarg7);
  public final static native long new_DebugHandler();
  public final static native void DebugHandler_director_connect(DebugHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void DebugHandler_change_ownership(DebugHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupDebugHandler(long jarg1, DebugHandler jarg1_, int jarg2);
  public final static native void delete_OnDevicePlugHandler(long jarg1);
  public final static native void OnDevicePlugHandler_OnEvent(long jarg1, OnDevicePlugHandler jarg1_, boolean jarg2);
  public final static native void OnDevicePlugHandler_OnEventSwigExplicitOnDevicePlugHandler(long jarg1, OnDevicePlugHandler jarg1_, boolean jarg2);
  public final static native long new_OnDevicePlugHandler();
  public final static native void OnDevicePlugHandler_director_connect(OnDevicePlugHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnDevicePlugHandler_change_ownership(OnDevicePlugHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnDevicePlugHandler(long jarg1, OnDevicePlugHandler jarg1_);
  public final static native void delete_OnOcrHandler(long jarg1);
  public final static native void OnOcrHandler_OnEvent(long jarg1, OnOcrHandler jarg1_);
  public final static native void OnOcrHandler_OnEventSwigExplicitOnOcrHandler(long jarg1, OnOcrHandler jarg1_);
  public final static native long new_OnOcrHandler();
  public final static native void OnOcrHandler_director_connect(OnOcrHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnOcrHandler_change_ownership(OnOcrHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnOcrHandler(long jarg1, OnOcrHandler jarg1_);
  public final static native void delete_OnMsrHandler(long jarg1);
  public final static native void OnMsrHandler_OnEvent(long jarg1, OnMsrHandler jarg1_);
  public final static native void OnMsrHandler_OnEventSwigExplicitOnMsrHandler(long jarg1, OnMsrHandler jarg1_);
  public final static native long new_OnMsrHandler();
  public final static native void OnMsrHandler_director_connect(OnMsrHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnMsrHandler_change_ownership(OnMsrHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnMsrHandler(long jarg1, OnMsrHandler jarg1_);
  public final static native void delete_OnBcrHandler(long jarg1);
  public final static native void OnBcrHandler_OnEvent(long jarg1, OnBcrHandler jarg1_);
  public final static native void OnBcrHandler_OnEventSwigExplicitOnBcrHandler(long jarg1, OnBcrHandler jarg1_);
  public final static native long new_OnBcrHandler();
  public final static native void OnBcrHandler_director_connect(OnBcrHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnBcrHandler_change_ownership(OnBcrHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnBcrHandler(long jarg1, OnBcrHandler jarg1_);
  public final static native void delete_OnDocHandler(long jarg1);
  public final static native void OnDocHandler_OnEvent(long jarg1, OnDocHandler jarg1_);
  public final static native void OnDocHandler_OnEventSwigExplicitOnDocHandler(long jarg1, OnDocHandler jarg1_);
  public final static native long new_OnDocHandler();
  public final static native void OnDocHandler_director_connect(OnDocHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnDocHandler_change_ownership(OnDocHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnDocHandler(long jarg1, OnDocHandler jarg1_);
  public final static native void delete_OnDocRemoveHandler(long jarg1);
  public final static native void OnDocRemoveHandler_OnEvent(long jarg1, OnDocRemoveHandler jarg1_);
  public final static native void OnDocRemoveHandler_OnEventSwigExplicitOnDocRemoveHandler(long jarg1, OnDocRemoveHandler jarg1_);
  public final static native long new_OnDocRemoveHandler();
  public final static native void OnDocRemoveHandler_director_connect(OnDocRemoveHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnDocRemoveHandler_change_ownership(OnDocRemoveHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnDocRemoveHandler(long jarg1, OnDocRemoveHandler jarg1_);
  public final static native void delete_OnTouchDisplayHandler(long jarg1);
  public final static native void OnTouchDisplayHandler_OnEvent(long jarg1, OnTouchDisplayHandler jarg1_, int jarg2, float jarg3, float jarg4);
  public final static native void OnTouchDisplayHandler_OnEventSwigExplicitOnTouchDisplayHandler(long jarg1, OnTouchDisplayHandler jarg1_, int jarg2, float jarg3, float jarg4);
  public final static native long new_OnTouchDisplayHandler();
  public final static native void OnTouchDisplayHandler_director_connect(OnTouchDisplayHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OnTouchDisplayHandler_change_ownership(OnTouchDisplayHandler obj, long cptr, boolean take_or_release);
  public final static native void SetupOnTouchDisplayHandler(long jarg1, OnTouchDisplayHandler jarg1_);
  public final static native String GetLastPSAErrorText();
  public final static native int GetLastPSAErrorValue();

  public static void SwigDirector_DebugHandler_OnEvent(DebugHandler self, int Timestamp, String Thread, String Domain, int Level, String Function, String Message) {
    self.OnEvent(Timestamp, Thread, Domain, Level, Function, Message);
  }
  public static void SwigDirector_OnDevicePlugHandler_OnEvent(OnDevicePlugHandler self, boolean plugged) {
    self.OnEvent(plugged);
  }
  public static void SwigDirector_OnOcrHandler_OnEvent(OnOcrHandler self) {
    self.OnEvent();
  }
  public static void SwigDirector_OnMsrHandler_OnEvent(OnMsrHandler self) {
    self.OnEvent();
  }
  public static void SwigDirector_OnBcrHandler_OnEvent(OnBcrHandler self) {
    self.OnEvent();
  }
  public static void SwigDirector_OnDocHandler_OnEvent(OnDocHandler self) {
    self.OnEvent();
  }
  public static void SwigDirector_OnDocRemoveHandler_OnEvent(OnDocRemoveHandler self) {
    self.OnEvent();
  }
  public static void SwigDirector_OnTouchDisplayHandler_OnEvent(OnTouchDisplayHandler self, int TouchDown, float RelativeX, float RelativeY) {
    self.OnEvent(TouchDown, RelativeX, RelativeY);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
